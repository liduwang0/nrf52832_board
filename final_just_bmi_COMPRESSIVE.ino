#include <nrf_soc.h>
#include "lp_BLESerial.h"
#include "mysht40.h"
#include <SPI.h>
#include <Wire.h>
#include "bmi2xx.h"

#include "Arduino.h"
#include "SD.h"
#include "mycompress.h"
#include <ArduinoEigenDense.h>


using namespace Eigen;
using Eigen::MatrixXf;
MYCOMPRESS compress_data;

String buffer = "";

int16_t loop_counter_for_compressive_sensing = 0;
int gyr_detecter = 0;
long motion_sensor_time_interval = 80;

long interval_T1_BLE = 5;
long interval_T3_SHT40 = 5000;
long interval_T4_BMI270 = motion_sensor_time_interval;


bool bmiflag = 0;

unsigned long prevTime_T1 = millis();
unsigned long prevTime_T3 = millis();
unsigned long prevTime_T4 = millis();
bool shtflag = 0;

int automatical_time_interval_counter = 0;


uint8_t automatical_time_interval_function_switch = 0x00;
bool t_and_h_output_switch = 0;
bool compress_switch = 0;


int offset = 0;
File my_sd_File;

MYSHT40 sht;


// int config_runtime_flag = 0;
uint8_t bmi_pwr_control;  // 0

uint8_t acc_range_control;  // 1
uint8_t gyr_range_control;  // 2
uint8_t bmi_acc_config;     // 3
uint8_t bmi_gyr_config;

uint8_t compressive_sensing_control;  // 4
uint8_t data_compression_control;     // 5


uint8_t te_hu_control;     // 6
uint8_t infrared_control;  // 7

int config_from_ble_counter = 0;  //因为收到的数字我需要++ ，总不能加到7 8 9把，每次到+到6的时候就会清零。从头开始储存参数

uint8_t received_config_from_ble[8];
int new_256buffer[256][6];

int compressive_sensed[64];
lp_BLESerial blePeripheral;




BLEService sensorConfigService = BLEService("19B10000-E8F2-537E-4F6C-D104768A1214");

// create switch characteristic
BLECharCharacteristic bmi_pwr_Characteristic = BLECharCharacteristic("19B10001-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
BLECharCharacteristic acc_range_Characteristic = BLECharCharacteristic("19B10002-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
BLECharCharacteristic gyr_range_Characteristic = BLECharCharacteristic("19B10003-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
BLECharCharacteristic bmi_hz_Characteristic = BLECharCharacteristic("19B10004-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
BLECharCharacteristic compressive_sensing_Characteristic = BLECharCharacteristic("19B10005-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
BLECharCharacteristic data_compression_Characteristic = BLECharCharacteristic("19B10006-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
BLECharCharacteristic te_hu_Characteristic = BLECharCharacteristic("19B10007-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);
BLECharCharacteristic infrared_Characteristic = BLECharCharacteristic("19B10008-E8F2-537E-4F6C-D104768A1214", BLERead | BLEWrite);


BLEService Start_Service = BLEService("f2783635-3a07-4a51-9696-459ae784363e");  // 我发现只要一个lp_BLESerial blePeripheral就够了。我两个ttribute，到时候收到消息可以分辨是哪里收到了消息


BLECharCharacteristic Start_Characteristic = BLECharCharacteristic("f2783636-3a07-4a51-9696-459ae784363e", BLERead | BLEWrite);


String sd_filename = "where_is_my_name.CSV";
unsigned int BMI_chip_ID;
int file_count;
int config_size;
int BMI_init_status;
int BMI_power_mode;
BMI2xx bmi2xx;
Eigen::Matrix<float, 48, 64> matrix48;

void setup() {
  //32 行和 64 列的矩阵,只能放在setup()，其他地方不行
  matrix48 << -0.00046394, -0.0010105, -0.0022278, 0.0012662, 0.002441, -0.00088115, -0.0031043, -0.0018578, 0.0015302, 0.0027551, 0.0032006, -0.0043303, 0.00010832, 0.0054017, 0.00010379, -0.00035791, 0.003351, -0.0051888, -0.0013714, -0.003161, 0.0010772, -0.0012696, 0.0025565, -0.0026756, -0.0023352, 0.00074903, 0.0001905, 0.0025921, 0.00054415, -0.0034699, -0.00055399, -0.0003667, -0.002689, 0.0053563, 0.0036805, 0.0021573, -0.0041407, -0.00036448, -0.0047332, 0.0025687, 0.0022056, -0.0024624, -0.0031833, -0.0068886, -0.0020324, -9.2818e-05, -0.0009006, -2.6206e-06, -0.0034745, 0.00073177, 0.00062785, -0.004367, 0.002642, 0.0014409, -0.0036565, -0.0013068, 0.0067136, 0.00040383, 0.00051753, -0.0020739, 0.0070777, 0.0020891, -0.0013494, 0.001479,
    -0.0025752, 0.00019431, -0.0060613, -0.0063601, 0.0017507, -0.0058405, -0.00054918, -0.0025442, -0.0018343, 0.0012854, -0.0016841, 0.00048473, 0.0014879, -0.0037037, 0.00046314, 0.0037087, 0.0036144, -0.0023889, 0.00096305, 0.0060898, -0.00057122, -0.0012718, -0.0086456, 0.0029012, 0.00017037, 0.0050837, -0.0028943, 0.00049097, -0.0030624, 0.0059073, 0.0051723, -0.0012674, -0.00096412, -0.0019381, 0.0021674, 0.003055, 0.0017819, 0.0033144, 0.0018756, -0.006951, 0.00011897, 0.0031155, -0.0016807, 0.007944, 0.0032181, 0.0026783, -0.00028494, -0.00014063, -0.0053812, -0.0038606, -0.0057207, 0.0013133, -0.00033313, 0.00070706, 0.0004238, -0.0020518, 0.00066968, -0.00249, -0.00059942, -0.0027049, 0.00016272, -0.0061908, 0.0021729, -0.0024217,
    -0.0012308, 0.0004006, -0.0080574, -0.0033228, -0.00080558, -0.0010497, -0.0033557, -0.0021939, -0.0012544, 0.001742, 0.002152, 0.00068632, 0.0057485, -0.0028548, -0.00209, -0.0012254, -0.0062758, -0.0027435, 0.0006217, 0.0020614, 0.0023584, -0.0029737, -0.0022254, 3.9551e-05, -0.0022807, -0.0016213, 0.0030949, 0.0024744, 0.0025068, -4.3465e-05, 0.00032947, 0.003045, 0.0018017, 0.0077865, -0.00087806, -0.00077529, -0.0014994, 0.0087257, 0.00081032, 0.001252, 0.00083231, -0.0032764, -0.00079986, 0.00088421, 0.0025993, -0.0013663, 0.00049467, -0.0029688, 0.0018844, 0.0028868, 0.0054308, -0.0011745, -0.0084695, 7.4247e-05, 0.0035587, 0.0038922, -0.0019986, -0.0013882, 0.0023722, 0.0028188, 0.0017186, 0.00042685, -0.00074137, 0.0001034,
    -0.0013084, -0.0007981, 0.0016957, 0.0042431, -0.0025916, -0.0042107, 0.00062451, 0.00027221, 0.00089646, -0.0016184, 0.0047996, -0.0066933, -5.4257e-05, -0.0010586, -0.00048243, -0.0044408, 0.0028862, -0.0037442, -0.00091007, -0.000744, -0.0030557, -0.0013336, -0.0055539, 0.00061383, -0.0014935, -0.0021812, 0.005028, -0.00077664, 0.0016104, 0.0014533, 0.0004419, 0.00079468, -0.0047222, -0.00030018, 0.0057164, -0.0058531, -3.8565e-05, -0.0035486, 0.0020372, 0.0029572, 0.010076, -0.0035678, 0.0027936, -0.0015479, -0.0011252, -0.0023218, 0.0064685, -0.0015671, -0.001523, -0.0027621, 0.00052985, 0.0041187, -0.0062127, -0.00015909, -0.00067674, -0.006846, -0.00072186, -0.0046622, -0.0066159, -0.00065182, 0.00068677, 0.0025817, -0.00099821, 0.00037773,
    0.0028491, -0.0015364, 0.00025916, -0.0007917, 0.00098249, 0.0025629, -0.00032259, 0.0042322, -0.0010403, -0.0021024, 0.0032603, 0.0027639, 0.00012661, 0.00092311, -0.0034284, 0.0019656, -0.0039377, -0.0015778, -0.0011622, 0.0011741, 0.0016327, 0.0057978, -0.006275, -0.0045473, 0.0012494, 0.0016681, 0.0024037, -0.001809, 0.00060077, -0.0012479, 0.0041446, 0.0012448, 0.0020326, -0.0018474, -0.0022559, -0.0010268, -0.0012304, -0.00069596, 0.0028275, 0.0004814, -0.0033219, 0.0062116, -7.3479e-05, 0.0041774, -0.0018429, -0.00015634, 0.0045777, -0.0032061, -0.00013986, 0.0044147, -0.0025272, -0.0024525, 0.0026693, -0.001643, 0.0012303, 0.00019284, -0.0024028, 0.0043362, 0.0048742, -0.00037754, -0.0037496, 0.0028924, -0.00063155, -0.00087319,
    0.0051094, -0.0019944, 0.010341, 0.00090584, 0.0032324, 0.0014397, 0.00020403, -0.0044572, 0.0012935, 0.0044541, -0.0022573, -0.0049584, -0.0015361, 0.0011347, 0.0033567, 0.0043001, 0.00081742, 0.0024632, 0.0011955, 0.0032024, 0.0060311, 0.011112, 0.0063204, -0.0044533, 0.0033683, -0.0053396, 0.00033966, -0.0037777, -0.0027319, -0.002236, -0.0027494, -0.0013365, 1.9155e-05, -0.00065861, 0.0025363, -0.0025914, -6.7365e-05, 0.0014023, -0.0029376, -0.003153, 0.0035844, 0.0071289, 0.0014006, 0.0016117, -0.0011056, 0.0019042, -0.0018691, -0.0061132, 0.0017943, 0.0043243, 0.00063042, -0.00077765, -7.4864e-05, -0.0012862, -0.00067747, 0.0027346, -0.0029093, -0.0029423, -0.0031483, -0.0001796, -0.0022879, -0.0047976, -0.0024967, 0.005863,
    0.0010051, -0.0041942, -0.0019965, 0.0026879, 0.0056948, 0.00012332, -0.0010067, 0.00013519, 0.0013659, -0.0020616, -0.0031255, -0.0042847, -0.0038065, -0.00082566, 0.0080644, -0.0015685, 0.0012053, -0.0049123, -0.0017267, -0.0013671, -0.0043496, -0.0004914, 0.00065166, -0.0016208, -0.0013893, 0.0051221, 0.00027779, -0.00082356, -0.0015748, 0.0010919, 0.00045842, -0.00069011, -0.0038768, -0.0018867, 0.0014175, -0.0029717, -0.0052396, -0.0011844, -0.0039095, -0.0010134, 0.0046842, 0.0012816, 0.0024101, -0.00034138, -0.0026405, -0.0050972, -0.0055165, 0.0020445, 0.0040285, 0.00073153, -0.00075352, -0.00050357, -0.0042682, -0.0019206, -0.0044561, -0.0032771, -0.001159, 0.00064155, -0.00054996, 0.0012946, 0.002071, 0.0032561, 0.0016965, -0.00084212,
    -0.0041604, -0.00069056, 0.00017028, 0.0043752, 0.003721, -0.00084572, 0.0051979, -0.00016321, 0.0040898, -0.0031354, 0.0018506, 0.0040465, 0.0036904, 0.0010205, 0.00048349, -0.0018213, -0.0042624, 0.0018611, 0.0010217, 0.00052838, 0.0049, 0.0073426, -0.0033876, 0.0022634, -0.0042539, 0.00018427, -0.0049465, -0.0041354, 0.0031697, -0.00090381, -0.0029155, 0.00022095, 0.0025042, -7.3622e-07, 0.0051604, 0.0021315, -0.0060513, 0.0084744, -0.0030542, 0.0019891, 0.0070536, -0.0050287, 0.0013187, 0.00049525, -7.2756e-05, 0.0015464, -0.001339, -0.0033155, 0.0037626, 0.0050993, 0.0023643, -0.0053287, 0.0048992, -0.0020023, 7.4902e-05, -0.0044952, -0.0043878, 0.0012918, 0.00011894, -0.0003142, 0.00081184, 0.00067146, 0.0038086, -0.0025267,
    0.0050087, 0.001627, -0.00025789, -0.0011724, 0.00097234, 0.00097191, 0.0051631, 0.0022052, -0.001667, -0.00052119, -0.00069132, -0.0019612, -0.004353, -0.0062762, 0.0010058, 0.0063777, -0.0016785, 0.0020313, 0.0048339, 0.0015103, 0.0014022, -0.00062053, -0.0018986, 0.00074383, 0.0034905, 0.0040332, -0.00038378, 0.001075, 0.001278, -0.0028427, 0.0064521, 0.0028238, 0.0016906, 0.0041687, -0.0033, -0.0013455, -0.0035434, 0.0014461, 0.0046675, -0.0062403, -0.0050535, 0.0042635, 0.00092145, -0.00049952, -0.0053679, -0.0021384, 0.0020954, 0.0011291, -0.00086074, 0.0015886, 0.0012858, 0.0036277, 0.00060801, -0.0023896, -0.0024899, -0.0030331, 0.0015677, -0.0036561, 0.0017446, -0.0032925, -0.00083297, 0.0046425, -0.0026436, -0.0069482,
    0.001467, 0.00069962, -0.0032423, -0.0015806, 0.004605, 0.0033608, -0.00077165, -0.0021934, -0.0029499, 0.00065173, 0.005739, 0.0026237, -0.0028954, -0.0033636, -0.00035323, 0.0045396, 0.00043836, -0.0055343, 0.0019677, -0.0056222, -0.00062039, 0.0039511, 0.0058717, 0.004144, 0.0041748, 0.0071729, -0.0014253, 0.0052176, 0.0016592, -0.0019993, -0.0050801, -0.0023427, 0.0040683, 9.7697e-05, -0.00073162, 0.0010444, -0.0047377, -0.0039403, -0.0014268, 0.0015704, -0.00073104, 0.0029257, 0.0057629, -0.0025072, 0.0021418, -0.0066224, 7.0142e-05, -0.0046612, -0.0030148, 0.0028916, 0.0010926, -0.0066618, -0.0045418, 0.00028896, 0.0018211, -0.0059587, -0.00044913, -0.0052758, 0.003163, 0.0020944, -0.0029909, 0.0016904, -6.5479e-05, -0.0081006,
    0.00034118, 0.0037594, -0.0036841, -0.00055353, -0.0024557, -0.0028612, -0.002124, -0.00095127, 0.0019492, 0.0014657, -0.0012365, 7.0253e-05, 0.00077814, 0.0019075, 0.0020063, -0.0024111, -0.0035563, 0.0048635, -0.0021873, 0.0033389, 0.0020563, -0.00030934, 0.0020335, -0.0013535, 0.0042535, 0.0012933, 0.0016605, 0.0065921, -0.0022519, -0.0046025, -0.004203, 0.0047639, 0.0026934, 0.0084646, 0.0027757, -0.0025672, -0.0035992, 0.005552, 8.713e-05, 0.0024827, -0.0072572, -0.0026375, -6.3857e-05, -0.0031541, -0.0028834, -0.0059251, -0.00013235, 0.0012435, -0.0016102, -5.2911e-05, -0.0060078, 0.0015352, 0.0036096, -0.00077425, 0.001208, 0.005611, 0.00015723, 0.0063774, 0.0012203, -0.0029959, 0.0028447, -0.0044972, 0.0015519, 0.0045615,
    -0.00071063, 0.00052922, -0.0029754, 0.0038259, 0.00027655, -0.006841, 0.0035305, -6.9405e-05, 6.0755e-05, -0.0039107, 0.0049328, -0.0018481, -0.0014633, -0.0004196, -0.00092014, -0.0024921, -0.0015185, -0.0033258, 0.0013944, -0.0023505, -0.0043402, -0.0059115, -0.002478, 0.005334, 0.0012857, 0.0059676, -0.0024992, 0.0039086, 0.0046807, -0.001259, 0.0065762, -0.0038286, -0.0010205, 0.0012178, 0.00043998, 0.0011306, -0.00081327, 0.0042113, 0.0027501, -0.00048019, -0.0016578, 0.00040827, -0.00073526, -0.0010543, 0.0010863, -0.0052667, 0.0010576, -0.00026083, -0.0036695, 0.0018462, -0.0018412, -0.001291, 0.0023996, 0.0023835, -0.0013599, 0.0034891, -0.00091323, -0.00046218, -0.0015117, 0.0011975, -0.0035695, -0.006143, -0.0013102, 0.004437,
    0.0016441, -0.0025796, 0.0050266, -0.004653, 0.0002752, 0.0011818, -0.0045224, -0.0029883, 0.0031222, 0.0032075, -0.0010749, -0.0036808, -0.00054838, -0.0035646, -0.0011662, -8.3315e-05, -0.00073655, -0.00068178, 0.00063004, -0.0021781, 0.0012962, 0.00026095, -0.0037352, -0.0052906, 0.00029993, -0.0017582, 0.0046849, 0.0032516, 0.002862, -0.0018964, 0.0026886, 0.0010237, -0.0006511, 0.00065124, -0.0025915, 0.00038736, -0.00030727, 0.0022605, 0.0076044, -0.0029315, 0.0026746, -0.0020642, 0.0058472, 0.00086049, -0.00035298, -0.00075979, -0.0032285, 0.0010621, 0.0038647, -0.001575, -0.0053705, 0.0022336, -0.0028752, -0.0010609, -0.0018027, -0.0030069, 0.0021569, 0.0018597, -0.00046283, -0.0022153, 0.002155, -0.0066441, 0.0037828, -0.0034821,
    0.0032695, 0.0025916, -0.0010117, -0.0026255, -0.00028503, -0.0038365, -0.0013041, -0.0010843, 0.0057605, 0.0078641, 0.0007825, 0.001762, -0.00086928, -0.0035495, -0.0024208, -0.0037879, 0.0024386, -0.002481, 0.0022308, -3.9369e-05, 0.00035771, 0.0018358, 0.0024675, 0.0020307, 0.0047335, 0.00067286, 0.0043686, 0.0031139, -0.00059074, 0.00041061, 0.0050708, -0.0029651, -0.0020524, 0.0040998, 0.00055012, -0.0010055, -0.00025255, 0.0014758, 0.00068372, -0.00025015, -0.00019202, -0.00086496, -0.0055138, -0.0014585, -0.0033163, 0.0011086, 0.0015433, 0.0032564, -0.0012602, 0.0031788, -0.00013059, 0.00032015, -0.0010681, 0.0076056, 0.0023906, 0.00033604, 0.002347, 0.00085426, -0.0011749, 0.0023119, 0.008144, 0.0036946, -0.0041589, 0.0011835,
    -0.0025996, -0.0027084, -0.00054841, 0.002301, 0.0036257, 8.3976e-05, 0.0070299, 0.00096343, 0.0037489, -0.0064725, 0.0023866, 0.00092073, -0.00023788, 0.0011046, 8.2105e-05, 0.0024767, -0.0010208, 0.0042364, 0.0023823, -0.0070554, 0.0066432, -4.6555e-05, -0.0029918, 0.0027391, -0.0031523, 0.00017747, -0.0053139, -0.0057688, -0.0027243, -0.0049933, -0.0033192, -0.00012912, 0.0022452, -0.0055043, -0.00016156, -0.0050887, 0.0027701, -0.00068123, -0.0064854, -0.0038966, 0.00054234, -0.00096917, -0.0023245, 0.001902, -0.001172, -7.4023e-07, 0.0017193, 0.0059514, -0.00070257, 0.0021753, 0.0011292, -0.002656, -0.0042297, 0.0027783, 0.0014993, -0.000128, 0.0013566, -0.0010018, 0.0012298, 0.0040348, -0.00089541, 0.002028, -0.007299, 0.0020717,
    0.00028224, -6.8976e-05, -0.0012749, 0.00037453, -0.0022021, 0.00088993, 0.0042765, 0.0011064, -0.0059913, 0.0059197, -1.5527e-05, -0.0017026, -0.0018641, -0.0016277, 0.0061071, 0.002033, 0.00042841, -0.0025893, -0.00051209, 0.00044112, 0.00027179, -0.0030565, -0.0067911, -0.0038397, 0.00074456, 0.0005202, -0.0037494, -0.0019012, -0.0054579, 0.0018014, 0.0041009, -0.002515, -0.00030359, -0.0032822, -0.0033095, -0.0047957, 0.0020494, 0.0045069, 0.0001421, 0.00051082, -0.0024208, 0.0028554, 0.00052924, -0.00074477, 0.0057011, -0.00041472, 0.0045977, 0.0031111, -0.00064778, -0.0016418, 0.0028079, 0.00090847, 0.003469, -0.0044734, -0.0015098, -0.0058399, 0.00025635, -0.0023691, 0.0016433, 0.001346, 0.0028066, 0.0058144, 0.0024817, 0.00092389,
    -0.00096627, 0.0030951, 0.0043253, 0.0024983, -0.0018854, -0.0034073, -2.062e-05, 0.0029633, 0.0031181, -0.0049237, -0.00082932, -0.0030807, -0.0041339, -0.0024861, 0.0025231, -0.0043013, 0.0025575, -0.004726, 0.0040051, -0.00045951, 0.004603, -0.0043328, -0.00083896, -0.0046352, -0.0045327, -0.0022441, -0.0009259, 0.0037867, 0.0011538, -0.0010071, -0.0039505, -0.00038321, 0.002068, 0.00011643, 0.0012673, -0.0013228, 0.0049658, 0.0043452, 0.0026186, 0.0030928, -0.0039256, 0.0031448, -0.0077062, -0.0025582, 0.001907, 0.00024541, 0.0048671, -0.0020461, -0.0060552, -0.0078371, 0.0012901, -0.00059265, 0.0014733, 0.0028433, -0.0018159, 0.00034779, 0.0017842, -0.0025598, -0.0014028, -0.0024202, -0.00081485, -0.00051357, 0.00076018, -0.0038931,
    0.0029199, -0.00051601, -0.0016913, -0.00057591, 0.0032782, -0.0034282, -0.00044947, -0.00095829, 0.0038357, 0.001361, 0.0022098, 0.00078513, 0.0027549, 0.0025541, -0.0044385, -0.0047532, 0.0003554, -0.0030441, 0.0037199, 0.0030539, -0.0010492, -0.0022321, -0.002106, -0.0035263, 0.0007276, 0.0042841, 0.0010713, 0.0031824, -0.0025746, -0.0039175, -0.00053417, 0.00065532, -0.0056455, 0.0010882, -0.0016955, 0.00092528, -0.0015547, 0.0054809, -0.0049185, -0.0029347, -0.0050519, -0.0049662, 0.0072873, 0.0022954, -0.0010454, 0.00060129, -0.0023441, 0.0038718, 0.0047524, -0.0023006, -0.0048519, -0.0041538, 0.0042939, 0.0025845, 0.005639, 0.0024351, 0.0014289, 0.0042299, -0.0011562, 0.00086291, 0.0035039, 0.0002152, -0.00034044, 0.0010671,
    7.5398e-05, 0.00023108, 0.0041054, -0.0020901, -0.007483, 0.0038063, 0.0033364, -0.0061193, -0.00052867, -0.00016176, -0.00032085, -0.0031299, 0.0074519, -0.00035218, 0.0039403, 0.0022059, -0.0015222, -0.00030042, -9.5905e-05, -0.0015326, -0.0079763, -0.0015279, 0.00022763, 0.00037389, -0.0051746, -0.0038847, -0.0017133, 0.001301, 0.00018731, 0.0053906, 0.001416, -0.005338, -0.00075109, -0.0075373, -0.0075664, 0.0064366, 0.00064643, -0.0020029, -0.0036707, -0.0068805, -0.0067048, 0.00087494, 0.00058653, 0.0027477, 0.0056437, 0.0063563, 0.0041334, -0.0016127, -0.0015611, 0.0012754, 0.0063953, 0.0064639, -0.00059445, 0.00038415, -0.0018577, -0.00018371, -0.0034433, 0.0031253, 0.0078677, 0.0016979, -0.000684, -0.0036576, 0.0035817, -0.003205,
    -0.0012162, -0.0018579, -0.00074193, 0.00063472, 0.000713, 0.0022095, -0.0011651, 0.00026732, 0.0014391, -0.0020428, 0.0024208, 0.0035928, 0.0051666, -0.0026769, -0.0031881, -0.0027297, 0.0033462, 0.0036409, 0.001905, -0.0010582, 0.0020319, -0.0011865, 0.0010212, -0.0044405, 0.0022469, -0.0028539, 0.0006669, -0.0022931, 0.00062945, -0.0013423, 0.0022759, 5.3295e-05, 0.0045985, -0.0041952, 0.00096051, 0.0035462, -0.00091653, -0.0057075, -5.68e-05, -0.0023763, -0.0016414, 0.003641, -0.00096364, 0.0031827, 0.0096659, 0.0046658, 0.0060225, 0.00046047, 0.00040913, -0.0070905, -0.00018729, -0.0051897, 0.0039347, 0.00027803, -0.0023716, 0.0025167, -0.0072221, 0.0033283, -0.00080249, 0.00012235, -0.009782, -0.00080824, 0.0018178, 0.00081211,
    -0.0028019, 0.00037767, 0.0034087, -0.0037868, 0.0021054, -0.0032173, -0.00034712, -0.0042246, -0.00090838, 0.0012404, -0.0020903, 0.002404, 0.0044077, 6.3327e-05, 0.0038352, -0.0010083, -0.0047448, -0.00082319, -0.0039803, -0.0049352, -0.00075282, 0.0059134, 0.0011101, -0.0014336, 0.00025805, 0.0039372, -0.0012635, -0.0013729, 0.00091169, 0.0015606, -0.0017756, 0.0017609, 0.0039884, -0.0031124, -0.0029043, -0.0063324, -0.0053261, 0.0079257, 0.00047575, 0.0037086, -0.00041219, 0.0013051, 0.005145, 0.0001965, -0.002573, -0.0098277, 0.00043308, -0.0038453, 0.00097993, -0.0019562, 0.0045551, 0.0059427, -0.0024933, -0.004225, -0.0036021, 0.0028873, 0.0034045, -0.0064165, -0.00043997, 0.001728, -0.0057571, -0.0012324, -0.0037105, 0.0024319,
    0.0033328, -0.0016917, 0.0014806, -0.0033716, 0.002172, 0.0052295, -0.0012001, 0.0028851, -0.0029054, -0.00095813, -0.010224, -0.0041225, 0.0038839, -0.0036642, -0.0092225, 0.0029394, 0.0016784, 0.00088034, -0.0044837, 0.0057842, 0.0059394, -0.0011697, -0.0039463, -0.004588, 0.0014135, 0.0042964, -0.0015998, -0.00037459, -0.0008885, 0.0066235, 0.0039891, 0.0039007, -0.0041936, 0.0041908, -0.0030415, 0.0027379, 0.0037794, -0.0013239, -0.00029184, 0.0042306, 0.005932, 0.0017099, 0.0066361, 0.0014214, -0.0010755, -0.0027266, 0.0026902, -0.0052571, -0.0020138, 0.0044164, -0.0017708, 0.0010417, -0.0030768, -0.0025884, -0.0062236, 0.002017, -0.002253, -0.00096492, -0.0018496, 0.001323, 0.0011612, -0.0017172, 0.00066586, -0.0014536,
    -0.0015271, 0.0055735, 0.00015345, 0.0019656, 0.00068662, 0.00085259, 0.001304, -0.0028838, -0.0017194, 0.0013055, -0.0034196, -0.00027456, -0.0064722, 0.00040761, 0.0019464, 0.0024823, 0.0041743, -0.00048208, 0.003777, 0.00018837, 0.0027387, 0.0013696, -0.0048528, -0.00021307, 0.0037888, -0.001515, 0.0031125, -0.0022989, 0.00043281, -0.0087561, 0.0022235, 0.0017568, 0.0029427, -0.0024529, 0.00030088, 0.00068685, -0.0050237, 0.0011034, -0.0024244, -0.0028789, 0.0018265, 0.0034165, 0.0044134, 0.006192, -0.0022656, 0.0018416, -5.2094e-06, -0.0039871, -0.0067514, 0.0015149, 0.0024405, -0.00048973, 0.0074304, -0.00028652, 0.0022482, -0.0067759, 0.0050309, -0.0013466, -0.0016627, 0.00028913, -0.0069906, 0.0015305, 0.00015008, 0.00032986,
    -0.00065926, -0.0019364, -7.775e-06, 0.0010602, -0.0010489, 0.0044232, 0.0010611, -0.0027609, -0.0020852, 0.0029725, 0.0039828, 0.0094559, 0.0042305, -0.0032477, 0.00037775, -0.0023389, -0.0011054, 0.0062254, 0.0052182, 0.0014271, -0.0061823, 0.0020901, 0.0030775, -0.00054707, -0.0057615, 0.0017457, -0.00017697, 0.0070568, 0.0046847, 0.0014944, -0.0016335, 0.0010674, -0.0043557, -0.0041156, -0.0044791, -0.0033381, -4.962e-05, -0.00011942, 0.0036806, 0.00053959, 0.0055272, -0.0082708, -0.0028246, -0.0040812, 0.00022225, -0.001699, -2.8227e-05, -0.003725, -0.00087023, 0.0036153, 0.00067952, -0.00087736, 0.0054615, 0.0069835, 0.00046225, 0.0014113, 0.004238, 0.0022694, 0.0018184, 0.0032254, 0.0017382, 0.001385, -0.0043725, -0.0019154,
    -0.0042324, -0.00059164, 0.0019584, -0.0093885, -0.0023894, 0.0021022, 0.0033451, -0.002622, -0.0018649, -0.0035904, -0.00098342, -0.00060055, -0.0044648, -0.00079106, -0.00026148, 0.0051628, -0.00878, 0.00045811, -0.0031907, -0.0021258, -0.0010601, -0.0043649, 0.0013381, 0.00038002, -0.0013987, -0.0016179, -0.0036737, 0.0041257, -0.0040592, -0.00069871, 0.0008921, 0.0058248, 0.0032253, -0.00079378, -0.0009791, 0.0020629, 0.00062462, -0.0034283, -0.0025401, -0.001543, -0.0051198, -0.0067823, 0.0053048, -0.007714, -0.0040981, -0.00032848, -0.005097, -0.001691, -0.00037146, 0.00090179, -0.0016631, -0.0032551, -0.00043409, -0.001478, -0.00081876, 0.0019602, 0.0035133, 0.00304, -0.0028647, 0.0038188, 0.0012644, -0.00018615, -0.0012421, 0.00053487,
    -0.00010423, 0.0052525, 0.0026546, 0.00076745, 0.00030832, 0.001201, 0.0033204, -0.0019076, -0.0010676, 0.0010276, 0.0060338, -0.0035229, 0.0034399, -0.0021595, -0.0026254, 0.00068154, -0.0036483, -0.0015621, -0.0038697, -0.0019512, -0.0008587, -0.0022993, -0.0021319, 0.0005132, 0.0040979, 0.0037326, 0.0009118, 0.00114, 0.00019208, -0.0013238, -0.0021244, -0.0065034, 0.00011333, 0.0057131, 0.0011524, 0.0037313, -0.0091259, -0.0035474, 0.00019597, 0.003516, 0.004762, 3.31e-05, 0.00048393, -0.0031381, -0.00079026, 0.0011208, 0.0018725, -5.9239e-05, -0.0010827, 0.00056493, 0.0036078, -0.0063039, -0.00063719, 0.0019548, -0.00028829, -0.0015124, -0.0011122, 0.0022785, 0.003219, -0.0044851, 0.00012768, -0.0034728, 0.0017045, -0.0037206,
    0.010296, 0.0043291, -0.0037416, -0.0021073, -0.001967, -0.0019865, -0.00080408, -0.0050825, 0.0014874, 0.00016305, -0.0016616, 0.0065196, 0.0032238, 0.00091441, 0.0017442, 0.0030707, 0.0034234, -0.00045121, -0.00086247, 0.00036966, 0.0010373, 5.1771e-05, 0.0007512, 0.0050238, 0.005011, -0.00079388, -0.0050658, 0.0033331, 0.0042926, -5.3946e-05, -0.00055922, 0.0028608, -0.0012247, -0.0030293, 0.0066326, 0.0016968, 0.0048016, 0.00010708, -0.0043622, -0.001233, 0.0011267, -0.0032691, 0.0025985, -0.00051841, -0.0014044, 0.0036773, 8.0143e-05, 0.00057309, -3.2369e-05, 0.0032955, 0.00025518, 0.00048462, -0.0041075, 0.0005945, 7.2081e-05, -0.0012718, 0.0022442, -0.00061963, -0.0015405, -0.0046768, -0.0041239, 0.00089293, 0.00055786, -0.0055708,
    0.00025749, 0.0017865, 0.00099422, 0.0038118, 0.0070822, 0.0036909, 0.0034222, -0.0032505, -0.0059554, -0.0027068, 0.0012144, 0.00099955, -0.0023771, 0.0069916, -0.0010595, -0.004564, 0.0041458, 0.0024729, -0.0017807, -0.0018744, -0.0050832, 0.00049754, 0.0013888, -0.0031559, 0.00088236, 0.00054826, 0.0020626, -0.0023279, -0.00072576, 0.0038947, 0.0036351, -0.0028379, -0.00061115, -0.00016506, -0.0054792, -9.5295e-05, -0.0013084, -0.0033466, -0.0020601, -0.00055134, -0.0067237, 0.0033826, 0.0039905, 0.0029547, -0.0046235, -0.0027376, 0.0013274, -0.00058876, 0.0022451, -7.4127e-05, -0.0031432, -0.0040874, 0.0053514, -0.0022566, 0.0047433, -0.0016469, 0.0035862, -0.00024618, 0.0010931, 0.0024662, -0.0033086, -0.0012301, -0.0012221, -0.00066837,
    0.0031141, 0.0012851, -0.0024097, 0.00075182, -0.0046143, 0.0039523, -0.0032473, 0.0012934, 0.00045029, 0.002792, -0.0050732, -0.0011749, -0.0015892, 0.00021491, -0.0011834, -0.0026803, -0.0068464, 0.0046953, -0.0047394, -0.000652, 0.0038981, -0.0051764, -0.0013795, -0.0027127, -0.0008598, 0.0078961, -0.0029461, 0.0011012, -0.0036136, 0.0024525, 0.0017013, -0.0014806, 0.00091709, 0.0015826, -0.004492, -0.0068832, -0.00084681, -0.00034672, 0.0024148, 0.0017227, -0.0027684, 5.3424e-05, 0.0046763, 0.0061377, -0.0066953, -0.0032692, -0.00031507, -0.0014966, 0.00016327, -0.0025314, -0.0028125, 0.0010947, 0.0010776, -0.00027747, 0.00063858, -0.0077612, 0.0045902, -0.0020016, -0.0018512, 0.00084794, 0.0017154, -0.0017621, 0.0072542, -0.0002594,
    0.0046975, -0.0046275, 0.0056818, 0.0040241, -0.0036172, -0.0039327, 0.0025803, -0.0028865, -0.0050648, 0.00082761, 0.0010334, -0.0005748, 0.0037322, -0.0010021, 0.001216, -0.001342, -0.006664, 0.0014124, -0.0016242, -0.0020691, 0.0033955, -0.0032471, 0.0023695, 0.0027296, 0.0013001, -0.0020708, 0.0018974, 0.00095914, -0.0004338, 0.0037612, -0.0013165, 2.5941e-06, -0.003626, -0.0013616, -0.0063792, 0.001561, -0.0052018, -0.00071482, 0.0050349, -0.0026363, 0.0041147, -0.0033143, 0.0034893, 0.0026746, 0.0019567, -0.0021013, 0.0047048, -0.0026649, 0.0085392, 0.00016576, 0.00382, -0.0022809, -0.0029698, -0.001947, 0.00014836, -0.0043497, 0.0024591, 0.0012595, -0.0012472, 0.0010709, 0.00072409, -0.00056701, 0.0025979, 0.0033038,
    -0.0031158, -0.0025996, 0.0023927, -0.0040496, -0.0057659, 0.002145, 0.0032692, -1.3776e-05, 0.002302, -0.00047737, -0.00075658, -0.0019944, -0.0052868, 0.0032399, -0.00086243, -0.0014147, 0.0016616, 5.7231e-05, -0.0054488, 0.0036952, -0.0056677, 0.0004311, -0.00014665, -0.0013328, -0.0013849, 0.003425, 0.0027801, 0.0016741, 0.0010184, 0.0045368, 0.001654, 0.004191, -0.0015177, -0.007148, -0.0027051, 0.0011047, 0.00067479, 0.0052698, 0.00028109, -0.0051299, -0.00051464, 0.0045302, -0.001601, 0.0022918, -0.0025821, 0.0033777, -0.0042256, 0.00081014, -0.003663, -0.0048718, 0.00052502, 0.00037066, 0.0049005, -0.0033469, 0.0030755, 0.0010885, -0.0013012, -0.00090517, -0.0052845, -0.00020985, 0.0015298, 0.00017822, -0.0037902, -0.0018197,
    0.0017662, -0.0009424, -0.0034667, -0.007698, 0.0063109, 0.0032482, -0.0012486, -0.0037228, 0.0019662, -0.0062525, 0.0042744, -0.004737, 0.0027498, -0.00051488, -0.0044699, -0.00093037, -0.0032344, -0.0037326, 0.00087343, 0.00055106, 0.0032108, -0.0015425, 0.0021355, 0.00017259, 0.0018861, -0.0041197, -0.0021416, -0.0052676, -0.0019829, -0.0040063, 0.0050573, -0.0013817, -0.004754, 0.0021762, 0.00028674, 0.0054031, 0.0013312, 0.00034704, 0.0011106, -4.4483e-05, 0.0018436, 0.0010617, -0.0019295, -0.0015013, -0.0038174, 0.00099662, 0.0065098, 0.0019406, 0.0082799, 0.0022793, 0.004278, 0.0010299, 0.00019812, -0.00065105, -0.0040816, 0.0017127, -0.00076451, 9.5877e-05, -0.0022609, -0.0021257, -0.0017205, -0.0042402, -0.0047635, 0.008912,
    0.0033433, 0.0024099, -2.6911e-05, -0.00036719, 0.0012019, 0.0057548, 0.0034985, -0.001114, 0.00082064, -0.00078451, 0.0016867, 0.0033946, 0.0013243, -0.0060534, 0.0072853, -0.0056976, 0.0012418, -0.0055564, -0.0025875, 0.0021897, 0.0007481, -0.0062197, -0.00080545, 0.001191, 0.0037565, 0.0066914, 0.0019528, 0.002966, -0.0020043, -0.00027202, 0.0018312, 0.0044348, 0.00074085, 0.0058486, -0.00051179, -0.00023894, -0.0018578, -0.00013447, 0.00023124, 0.0033751, 0.0053882, -0.0043828, -0.0015677, -0.0039173, 0.0013666, 0.0017527, -0.0013543, 0.0036074, -0.0039695, -0.0057076, -0.0029767, 0.0028784, -0.0018615, 0.0024851, 0.00085198, 0.0029074, 0.0026965, 0.002001, -0.0031828, 0.0044338, 0.0052132, 0.0017182, 0.0039454, 0.0040441,
    -0.00034023, 0.00033807, -0.0036295, -0.0028011, -0.0040494, 0.00054068, -0.0039525, -0.0018703, -0.0033216, 0.0027319, 0.0022503, -0.00020641, 0.0041606, -0.00027723, -0.0094984, 0.0028598, -0.0033105, 0.0020291, 0.0056207, -0.00045585, 0.0024616, 0.0051275, 0.0014438, 0.0015805, 0.0012484, 0.0022146, -0.00080934, -0.00048149, -0.0017754, 0.004107, -0.00030072, 0.0018828, -0.00050265, -0.0017269, 7.9465e-05, 0.003231, 0.00069547, 0.00041152, 0.0016203, -0.00069663, -0.0004054, -0.0019631, 0.0026532, -0.00063896, -0.0041299, 0.002863, 0.00034215, -0.0067177, -0.0016795, 0.0030583, -0.004138, 0.0027403, 0.00054049, -0.0011925, -0.0063623, -0.00034797, -0.00069318, 0.0052783, 0.0020319, 0.0001396, -0.001809, 0.0011865, 0.00021211, 0.0023784,
    -0.00035716, 0.0022265, -0.0020349, 0.0036455, 0.0059417, 0.00030418, -0.0025103, 0.0034419, -0.00012228, -0.0014532, -0.00054768, 0.0033007, -0.0050684, -0.00084585, -0.0022902, -0.0021646, -0.0052589, -0.0018043, 0.00076831, -0.0018098, 0.0021466, 0.0034063, -0.00018214, 0.0040068, -0.0031168, -0.00083947, -0.00055674, 0.0028401, -0.0018859, -0.001453, -1.3546e-05, 0.0058521, 0.0034415, 0.0014535, -0.0052211, -0.0023628, -0.0031303, 0.000247, 0.00078937, -0.0010877, -0.0018525, -0.00096755, -0.00077107, -0.00086681, 0.0061769, 0.00074666, -0.0065287, 0.00036798, 0.0031291, -0.0011543, -0.0056833, -0.0057021, 0.00099998, -0.0018949, -0.0040896, -0.0015844, 0.0043295, 0.00024091, 0.00074038, 0.003443, -0.0017556, -0.010111, 0.0024295, 0.0043637,
    -0.0019749, -0.0054171, -0.0012884, 0.0012531, -0.00085732, 0.0017387, -0.0018928, -0.00011717, -0.0025006, -0.0036283, -0.00051671, -0.0003283, -0.0024357, 0.00027011, 0.0028197, 0.0021511, -5.5768e-05, 0.0043555, 0.0043085, -0.0034034, -0.002543, -0.0009178, 0.00053096, 0.0036344, 0.0047144, 0.0031835, -0.0073394, -0.0026747, 0.00065296, -0.0039081, 7.9639e-05, -0.0035469, -0.0034746, -0.0014439, -0.0011088, -0.0028478, -0.0012818, 0.0030014, 0.0050972, -0.0019471, 0.0087445, 0.0024444, -0.005473, -0.0035589, -0.0043931, -0.0051099, -0.001169, -0.0039082, 0.0033344, -0.00044124, -0.00037742, -0.0011505, -0.0025277, 0.0048613, 0.0042081, 0.0026062, 0.0012643, -0.00054752, -0.0054163, 0.0020048, -0.0012344, 0.0048967, 0.00086479, -0.0017204,
    -0.003381, 0.0011906, 0.00027455, -0.0051716, 0.0023288, -0.0025948, -0.0024632, 0.0011589, -0.00052797, 3.3254e-05, 0.0011123, 0.0046515, -0.007245, 0.0049409, -0.0017732, -0.0021075, -0.0040238, 0.0046598, 0.0050454, 0.002966, 0.0029965, 0.0016602, 0.0049654, -0.0060515, 0.0046309, 0.0011304, 0.0012897, 0.003133, -0.0050377, -0.004565, 0.0022162, -0.00040958, -0.0032766, 0.0027131, 0.0035132, -0.0043924, 0.005259, -0.001284, -0.0004994, 0.00085855, 0.00010578, 0.0049948, -0.0024121, 0.0025418, 0.003684, 0.0050665, -0.0010248, 0.0034198, -0.0055072, 0.00060434, -0.0041863, 0.00096585, -0.0037497, 0.0029133, 0.0023177, -0.0012162, -0.0001459, -0.0015637, -3.1036e-05, 0.0035953, -4.0853e-05, -0.0040633, -0.0010067, -0.007842,
    -0.00065649, -0.0017278, -0.0023767, -0.0035254, 0.0021097, -0.0017557, -0.0013033, 0.0013993, 0.0026112, -0.0013856, 0.0051789, -3.9034e-06, 0.0064823, 0.0011952, -0.0018604, -0.007249, -0.0069492, -0.0030054, -0.0036484, 0.00049174, 0.0051449, 0.0074129, 0.0025554, -0.0026859, -0.0072648, 0.0015249, 0.0019769, -0.0015618, -0.0040787, 0.00088483, 0.0003268, -0.0023589, -0.0019551, 0.0028006, -0.00031342, 0.0048837, 0.00051018, 0.0044, -0.0019651, 0.0023288, -0.0057409, -0.00012934, 0.0059981, -0.0017682, -0.0040015, 0.0025636, 0.00067651, -0.0029504, -0.0015546, -0.0024265, -0.0019751, -0.0066407, -0.00038451, 0.0025172, -0.002745, 0.0033762, -0.005784, -0.0017311, -0.0019172, 0.0014967, -0.005203, -0.0013589, 0.0031865, -0.0015415,
    0.001211, 0.0019952, -0.0033423, -4.475e-06, 0.0012327, -0.00088337, -0.0013115, -0.0047016, -0.0028502, 0.0025368, 0.0034365, 0.008128, -0.0010591, 0.0039003, -0.0033662, -0.0051929, -0.0073589, -0.0018237, -0.0024623, 0.0027447, 0.0010355, 0.003018, -0.00033664, 0.00083668, 0.0038349, -0.0010415, -0.0010771, 0.00036581, 0.0012449, 0.0043489, -0.00079258, -0.0028552, 0.00068057, -0.005742, 0.0043303, -0.0030851, -0.00030717, -0.0011741, -0.0003408, 0.0012669, 0.0010222, -0.0034426, -0.00037687, -0.0041047, -0.00088104, 0.00018497, -0.00013813, 0.0020061, -0.0039086, -0.00051444, 0.0024227, -0.0025682, 0.0056722, -0.0018575, 0.001869, 0.0014495, 0.00064616, -0.0021472, -0.0022544, -0.0037629, -0.0015634, 0.005251, -0.0062043, -0.0034602,
    0.0037913, 0.0044169, 0.0022665, 0.0040923, 0.0015834, 0.00067127, 0.0044202, -0.0044572, 0.0011462, -0.0029771, -0.0035973, 5.4779e-05, 0.00075653, 0.00024345, -0.0037861, 0.0037906, -0.0029791, -0.00014271, 0.0022969, -0.0013612, 0.0020529, 0.0022272, 0.0022244, 0.00013119, -0.0010388, 0.00093187, -0.0027059, -0.0017637, 0.0014233, 0.001075, -0.0038111, -0.001724, 0.0029628, -0.0062482, -0.00030294, 0.0028915, 0.00036329, -0.0051407, 0.00084493, 0.0047725, 0.00051706, 0.0065535, -0.0052188, -0.0025461, -0.0023021, -0.0047271, -0.0013536, 0.0021509, 0.0010402, 0.0070619, -0.0022363, 0.0047235, 0.001511, -0.00073393, -0.0032116, -0.0031378, 0.0010586, -0.005438, -0.0037744, 0.0015765, 0.0052714, -0.0042261, -0.0032632, 0.0036934,
    0.0012946, -0.0063116, -0.00016697, 0.0023568, 0.0056085, -0.0026389, 0.0018362, -0.0021664, -0.0021532, -0.0032422, -0.00028443, -0.0042376, 0.0011283, -0.0031107, 0.00027274, 0.0019629, -0.0027655, -0.0012, 0.0021267, -7.3581e-05, 0.0035938, -0.0059015, 0.00077618, -0.0016124, -0.0014174, -0.0052495, -0.0012415, 0.0049228, -9.1352e-05, -0.0016353, -0.0020214, -0.0024152, 0.0044759, -0.0012947, 0.0022424, -0.0021585, 0.0030556, -0.00033253, -0.0036291, -0.00014588, 0.00065158, 0.0072612, -0.002913, -0.0039694, 0.00034012, 0.002543, -0.0046313, 0.0033062, -0.0039861, -0.0029369, -0.0012944, -0.0006175, 0.0012532, -0.0043405, -0.0016498, 0.0022512, -0.00059703, 0.00043022, -0.0035025, 0.00093739, -0.0016537, 0.0014764, -0.0074575, 0.006944,
    -0.0002269, 0.0010029, 0.0033095, 0.00077083, -0.0065688, 0.00061775, -0.0041704, 0.0045213, 0.0017921, 0.0010497, -0.0041014, -0.0011236, -0.0020939, 0.001555, 0.0021169, -0.0051755, -0.0028216, 0.0005771, -0.0027948, -0.005063, 0.0012852, 0.0026698, 0.0041617, 0.00048707, -0.0028273, 0.0013437, 0.003452, -0.0046929, -0.00058816, -0.0044362, -0.0047014, -0.0026969, -0.00335, -0.00057231, -0.0036739, 0.0023136, 0.00017368, 0.006583, -0.0024823, -0.0031218, 0.0066348, 0.0020828, -0.00086654, -0.0017744, 0.0037998, -0.0015625, -0.0021078, -0.0017102, -0.0014633, 0.001636, -0.0027787, 0.0026805, -0.002073, -0.0010936, -0.0010309, 0.0037549, 0.0075826, 0.00011096, 0.00039231, -0.0054853, -0.0013534, 0.0058182, 0.0049477, -0.0010208,
    0.0035286, -0.0015692, -0.0064579, -0.0033344, 0.0014704, 0.001058, -0.006342, 0.00022109, -0.0025177, -0.0045555, -0.0063688, 0.0013435, -0.00039947, -0.0020069, -0.001193, -0.0019046, 0.0028218, -2.4599e-05, 0.0040489, -0.0062338, -0.00036853, 0.0020029, -0.0018407, -0.0040483, 0.0041847, 0.0035922, -0.0023433, -0.0028607, -7.5259e-05, 0.0015337, -0.001808, 0.00045918, 0.0040393, 0.00051465, -0.001342, 0.0033077, 0.0021777, 0.0019207, -0.0052556, 1.2214e-05, -0.00029067, -0.0013892, 0.0018957, -0.0013998, -0.001839, 0.0013697, 0.0094703, -0.00026506, 0.0037805, -0.0021105, -0.0036214, -0.0021463, 0.00045142, 0.00086013, 0.0030263, -0.0024927, 0.00013831, 0.004262, -0.0059241, 0.0021759, -0.0027399, 0.0079894, -0.0013857, -0.0017734,
    0.0057099, -0.0041896, -0.00057417, -0.0027793, -0.0029872, 0.0053019, -0.0064116, 0.00089725, 0.0016416, 0.00082717, -0.001724, 0.0037971, 0.0040687, -0.0034676, -0.0003491, -0.0088814, 0.0017344, -0.0062152, 0.0068263, -0.0022349, 0.0022647, -0.0023204, 0.0030222, 0.0048401, -0.0072928, -0.003185, -0.0027217, -0.0003082, 8.4964e-06, 0.0021522, -0.00043524, -0.00047923, -0.0037003, -0.0014766, 0.00043449, 0.0023691, -0.0019633, -0.0033543, -0.0026701, -0.00090624, 0.0009611, -0.0061638, 0.0049347, 3.1889e-05, 0.0053635, 0.0032393, -0.0043937, -0.0011098, -0.00025879, -0.0033054, -0.00065127, -0.00057401, -0.0022078, 0.00437, 0.0052685, 0.0024094, 0.0020933, 0.00042423, -0.00096155, -0.0070788, 0.0042344, 0.0029803, -0.0010203, 0.00656,
    0.0046677, -0.001971, -0.0008933, 0.002497, 0.0014836, -0.0052718, -0.0050869, 0.0019887, -0.00017837, -0.0083528, 0.00074073, 0.0022158, 0.00027171, 0.0013486, 0.0026917, -0.0019208, -0.0043178, -0.0038997, 0.0012057, -0.0030303, 0.0044616, -0.0036898, -0.0037794, 0.0032318, 0.004835, 0.0012928, 0.0035889, -0.0018267, -0.0056409, -0.006777, 0.0038566, -0.0027737, -0.001462, 0.0019618, -0.0035754, 0.0018653, -0.00021523, -0.0031146, -0.0010036, -0.00080695, 0.0058326, 0.0012892, 0.0030988, 0.0036637, 0.010488, 0.0016405, -0.001931, 0.0031325, 0.0021258, -0.0039129, 0.00039854, 0.0070627, -0.0035025, -0.00063245, -0.0018073, 0.00070731, 0.002141, 0.0014388, -0.0015135, -0.0023314, 0.0043098, 0.00036077, -0.0023915, 0.0071458,
    -0.0022926, 0.00072399, -0.0037615, -0.0030016, 0.0022728, -0.0031392, -0.00026828, -0.00058338, -0.0055193, -0.00040401, 0.00066722, 0.00071573, 0.0031814, -0.00098458, 0.0059358, 0.0027917, -0.0025809, -0.00076363, -0.012546, 0.0072114, 0.003136, -0.0012358, -0.0030485, 0.00027435, 0.0042264, -0.00090117, -0.0057409, -0.0039438, -0.0019455, -0.00086347, -0.0064413, -0.0041693, -0.002549, 0.0039727, 0.00021428, 0.00048879, 0.00087509, -0.0065132, -0.0029628, 0.0020908, -0.0011823, -0.0010678, -0.0013954, -0.005932, -0.00044891, -0.0078232, 0.0021782, -0.00025992, -0.0027147, 0.0052167, -0.001413, -0.0024686, 0.0033035, -0.0023919, 0.00051273, 0.0018869, -0.00051291, 0.0030391, 0.0026321, 4.5338e-05, 0.00069868, -0.0010632, -0.011449, -0.0025197,
    0.0051998, -0.00013868, -0.0065238, -0.0014879, -0.0018526, 0.0061192, -9.1007e-05, -0.00061598, -0.00066221, -0.0022854, 0.0048075, -0.004587, 0.0053778, -0.0039456, 0.0028792, 0.0016897, 0.0010776, 0.0050647, -0.00067397, -0.002298, 0.0025546, 0.0014505, -0.0061392, -0.0014159, -0.0038095, 0.0056983, 0.0041878, -0.0019891, -0.0031579, 0.0043273, -0.0043231, -0.0017464, -0.00062323, 0.0021324, 0.0019074, -0.00047546, 0.00082092, -0.0059231, 0.001399, -0.0015254, 0.0024124, -0.00054979, -0.0039086, 0.0020477, 0.0030222, -0.0038599, -0.0020383, -0.0068929, -0.0034643, 0.00097322, 0.00015924, -0.00067327, -0.0032665, -0.0019766, -0.0033949, 0.0064696, -0.001408, -0.0059575, 0.00013046, 0.0029511, 0.0054014, -0.0018581, 0.0017425, -0.00015632,
    0.0019425, -0.00041936, -0.0020766, -0.0011827, -0.0068367, -0.0032135, -0.0018309, -0.0016689, -0.004531, -0.0036894, -0.0017974, -0.0025835, -0.00066715, 0.00084942, 0.0041348, -0.00086592, -0.00081414, 0.0031316, -0.0032967, 0.00053195, -0.0036167, 0.0017786, 0.00033996, -0.00041119, 0.0038533, 0.0061916, 2.8555e-05, 0.0019546, 0.001888, 0.0036996, -0.00059795, 0.0017095, 0.0010907, -0.001344, -0.0043232, -0.0020463, -0.0031156, 0.0020039, -0.0039856, 8.0464e-06, 3.7475e-05, 0.0035862, 0.0025251, -0.0033005, -0.00052493, 0.0065216, -0.0032299, -0.0024371, 0.00056106, -0.0022078, -0.0071766, 0.0039814, 0.0043041, -0.0025654, -0.0026608, 0.00011153, -0.0019345, -0.00073022, -0.0058738, 0.0026508, -9.6808e-05, -0.0019036, -0.00025023, 0.0004367;

  sd_power_dcdc_mode_set(NRF_POWER_DCDC_ENABLE);
  // put your setup code here, to run once:
  Serial.begin(115200);
  NRFSetup_Callback();
  BLESetup_Callback();
  delay(50);
  Serial.println("setup finished");
}

void loop() {

  // put your main code here, to run repeatedly:
  unsigned long currentTime = millis();

  // Task 1 : Blink LED1 (T1)
  if (currentTime - prevTime_T1 > interval_T1_BLE) {

    BLECentral central = blePeripheral.central();
    if (central) {
      if (blePeripheral.available()) {
        digitalWrite(13, LOW);
        String receivedMessage = blePeripheral.readString();
        Serial.print("Received message: ");
        Serial.println(receivedMessage);
        receivedMessage.remove(receivedMessage.length() - 1);  // 这里必去去掉最后一个元素，我从mit2app收到的最后一个元素不知道是什么，但是由于这个元素，导致我储存的数据csv前两行会有便宜。应该是最后这个休止符导致的
        sd_filename = receivedMessage;
        offset = 0;  // 原来bug在这里，当我更改文件名的时候，需要把offset清零，不然是从上次断点开始计数，比如从200开始存数据，那么前面两百可能就有坏数据
        //每次改名字的时候打头，，汇报暂时不加
        //   SD.begin(27);

        // Serial.println("rename");
        // my_sd_File = SD.open(sd_filename, FILE_WRITE);

        // if (my_sd_File) {
        //   String csv_file_name = "stamp,bmi_acc_x,bmi_acc_y,bmi_acc_z,bmi_gyr_x,bmi_gyr_y,bmi_gyr_z,adxl_x,adxl_y,adxl_z\n";
        //   my_sd_File.write(csv_file_name.c_str(), csv_file_name.length());


        //   my_sd_File.close();  //

        // }






        // if (receivedMessage[0] == 'F') {  // 这里居然只能单引号

        //   Serial.print("File name is: ");
        //   Serial.println(receivedMessage.substring(2));
        //   sd_filename = receivedMessage.substring(2).c_str();
        //   sd_filename_store_outside_loop = sd_filename;
        //   Serial.print("varialble is: ");
        //   Serial.println(sd_filename);
        // }
        digitalWrite(13, HIGH);
      }

      // central still connected to peripheral

      if (bmi_pwr_Characteristic.written()) {
        digitalWrite(13, LOW);
        received_config_from_ble[0] = bmi_pwr_Characteristic.value();
      }
      if (acc_range_Characteristic.written()) {
        received_config_from_ble[1] = acc_range_Characteristic.value();
      }
      if (gyr_range_Characteristic.written()) {
        received_config_from_ble[2] = gyr_range_Characteristic.value();
      }
      if (bmi_hz_Characteristic.written()) {
        received_config_from_ble[3] = bmi_hz_Characteristic.value();
      }
      if (compressive_sensing_Characteristic.written()) {
        received_config_from_ble[4] = compressive_sensing_Characteristic.value();
      }
      if (data_compression_Characteristic.written()) {
        received_config_from_ble[5] = data_compression_Characteristic.value();
      }
      if (te_hu_Characteristic.written()) {
        received_config_from_ble[6] = te_hu_Characteristic.value();
      }
      if (infrared_Characteristic.written()) {
        received_config_from_ble[7] = infrared_Characteristic.value();
        Serial.print("Current config:  ");
        for (int i = 0; i < 8; i++) {
          Serial.print(received_config_from_ble[i], HEX);
          Serial.print(" ");
        }
        Serial.println(" ");
        config_all_sensors();
        digitalWrite(13, HIGH);  // 放这里最合适，因为每次点了config device收到数据就直接配置了，不用去action开头判断 配置不配置
      }


      if (Start_Characteristic.written()) {
        // Serial.print(Start_Characteristic.value(), HEX);
        // Serial.println(" ");
        if (Start_Characteristic.value() == 0x01) {



          bmiflag = 1;

          // Serial.println("sht.on_or_off_status");
          // Serial.println(sht.on_or_off_status);
          // if (sht.on_or_off_status == 1) {
          //   runner.addTask(Sht40_Action);        // if等以后添加。因为这里添加后会失去一个功能，读取数据的时候不能配置device。
          //   Sht40_Action.enable();
          // }

          shtflag = 1;
        }
        if (Start_Characteristic.value() == 0x00) {

          bmiflag = 0;


          shtflag = 0;

          // config_runtime_flag = 0;


          //                       pinMode(24, OUTPUT);
          // digitalWrite(24, LOW);
          //               pinMode(9, OUTPUT);
          // digitalWrite(9, LOW);
          //       pinMode(10, OUTPUT);
          // digitalWrite(10, LOW);
          //  Wire.end();
        }
      }
      // Send a message over BLE
      // bleSerial.println("Hello from NRF52832!");
      //dummy, ble is high frequency, set up other dummy tasks

      // delay(1);
    }

    prevTime_T1 = currentTime;
  }

  // Task 2 : Glow LED2 when BTN is pressed
  if (((currentTime - prevTime_T3) > interval_T3_SHT40) && (shtflag == 1)) {
    if (t_and_h_output_switch == 1) {
      Sht40_Action_Callback();
      prevTime_T3 = currentTime;
    }
  }

  // Task 3 : Read input from serial monitor (0-255) and then write to LED3


  // Task 4 : print the brightness of LED3 in the serial monitor after every 5 seconds
  if (((currentTime - prevTime_T4) > interval_T4_BMI270) && (bmiflag == 1)) {
    unsigned long offset1 = 0;  // 时间偏移量
    unsigned long currentTime = millis();


    unsigned long startTime = micros();  // 记录开始时间
    // 执行一些代码




    // pinMode(22, OUTPUT);  //打开IC开关
    // digitalWrite(22, LOW);

    // if (config_runtime_flag == 0) {
    //   config_all_sensors();  //我发现放在BLEaction也不行，以为可能还没执行到这个函数，BMI_ADXL_Action就开始执行了，所以导致没有输出，我必须保证在读取前执行这个配置所以只有一种办法，
    //                          //使用BMI_ADXL_Action的时候调用这个一次，只能一次，不然一直配置，然后用flag表示执行过，当我按了stop，flag为0，下次执行BLE ACTIOND的时候又会仅仅配置一次
    //   config_runtime_flag = 1;
    // }


    SPI.setDataMode(SPI_MODE3);







    int16_t acc_x, acc_y, acc_z, gyr_x, gyr_y, gyr_z;
    uint8_t lsb_acc_x, msb_acc_x, lsb_acc_y, msb_acc_y, lsb_acc_z, msb_acc_z;  //比如从both更改为acc之后，gyr有前一次的值，我想变为0，我把这里所有给了初始值，但是我发现还是不等于0
    uint8_t lsb_gyr_x, msb_gyr_x, lsb_gyr_y, msb_gyr_y, lsb_gyr_z, msb_gyr_z;
    // Burst data read from ACC_x_0_7 to Gyr_8_13
    byte dataToSend = accel_gyr_addr | READ;

    digitalWrite(14, LOW);
    SPI.transfer(dataToSend);  //Send register location
    SPI.transfer(0x00);
    lsb_acc_x = SPI.transfer(0x00);
    msb_acc_x = SPI.transfer(0x00);
    lsb_acc_y = SPI.transfer(0x00);
    msb_acc_y = SPI.transfer(0x00);
    lsb_acc_z = SPI.transfer(0x00);
    msb_acc_z = SPI.transfer(0x00);

    lsb_gyr_x = SPI.transfer(0x00);
    msb_gyr_x = SPI.transfer(0x00);
    lsb_gyr_y = SPI.transfer(0x00);
    msb_gyr_y = SPI.transfer(0x00);
    lsb_gyr_z = SPI.transfer(0x00);
    msb_gyr_z = SPI.transfer(0x00);
    digitalWrite(14, HIGH);

    acc_x = ((int16_t)msb_acc_x << 8) | (int16_t)lsb_acc_x;
    acc_y = ((int16_t)msb_acc_y << 8) | (int16_t)lsb_acc_y;
    acc_z = ((int16_t)msb_acc_z << 8) | (int16_t)lsb_acc_z;

    gyr_x = ((int16_t)msb_gyr_x << 8) | (int16_t)lsb_gyr_x;
    gyr_y = ((int16_t)msb_gyr_y << 8) | (int16_t)lsb_gyr_y;
    gyr_z = ((int16_t)msb_gyr_z << 8) | (int16_t)lsb_gyr_z;

    Serial.print("acc_x = ");
    Serial.print(acc_x);
    Serial.print("\t");

    Serial.print("acc_y = ");
    Serial.print(acc_y);
    Serial.print("\t");

    Serial.print("acc_z = ");
    Serial.print(acc_z);
    Serial.print("\t");

    Serial.print("gyr_x = ");
    Serial.print(gyr_x);
    Serial.print("\t");

    Serial.print("gyr_y = ");
    Serial.print(gyr_y);
    Serial.print("\t");

    Serial.print("gyr_z = ");
    Serial.print(gyr_z);
    Serial.print("\t");

    Serial.println("");
    unsigned long endTime = micros();  // 记录结束时间

    unsigned long elapsedTime = endTime - startTime;  // 计算运行时间




    // Serial.print("BMI ST:");
    // BMI_init_status = bmi2xx.readRegister(INT_STATUS, 2);
    // Serial.println(BMI_init_status);




    //  Serial.print("sdname=");
    //Serial.print(sd_filename);



    int16_t input_data[6] = { acc_x, acc_y, acc_z, gyr_x, gyr_y, gyr_z };
    int input_data_size = sizeof(input_data) / sizeof(input_data[0]);

    new_256buffer[loop_counter_for_compressive_sensing][0] = acc_x;
    new_256buffer[loop_counter_for_compressive_sensing][1] = acc_y;
    new_256buffer[loop_counter_for_compressive_sensing][2] = acc_z;
    new_256buffer[loop_counter_for_compressive_sensing][3] = gyr_x;
    new_256buffer[loop_counter_for_compressive_sensing][4] = gyr_y;
    new_256buffer[loop_counter_for_compressive_sensing][5] = gyr_z;


    loop_counter_for_compressive_sensing++;
    Serial.println(loop_counter_for_compressive_sensing);

    if (data_compression_control == 1) {
      int8_t* compressed_data = compress_data.scaleArray(input_data, input_data_size);
      for (int i = 0; i < 6; i++) {
        input_data[i] = compressed_data[i];
      }
    }





    //必须很大，不然会出现乱码
    // Serial.println("CURRENT TIME.");
    // Serial.println(currentTime);
    // offset += sprintf(buffer + offset, "%lu", currentTime);
    // offset += sprintf(buffer + offset, ",");

    // for (int i = 0; i < 9; i++) {  //这里不能是sizeof input，不然数据是16个
    //   offset += sprintf(buffer + offset, "%d", input_data[i]);

    //   // Add comma delimiter for all elements except the last one
    //   if (i < 8) {
    //     offset += sprintf(buffer + offset, ",");
    //   }
    // }

    if (loop_counter_for_compressive_sensing == 256) {
      long starthaha_time = millis();
      for (int i = 0; i < 256; i++) {
        for (int j = 0; j < 6; j++) {
          Serial.print(new_256buffer[i][j]);
          Serial.print(" ");  // 打印空格以使输出更易读
        }
        Serial.println();  // 在每行结束后打印一个换行符
      }
      Serial.println("whole csv print over");
      for (int i = 0; i < 256; i++) {
        Serial.print(new_256buffer[i][0]);
        Serial.print(" ");  // 打印空格以使输出更易读
      }
      Serial.println();  // 在每行结束后打印一个换行符

      Eigen::Matrix<float, 256, 6> mat;

      for (int i = 0; i < 256; i++) {
        for (int j = 0; j < 6; j++) {
          mat(i, j) = new_256buffer[i][j];
        }
      }

      
      SD.begin(27);

      Serial.println("write successfully...");
      Serial.println(sd_filename);
      my_sd_File = SD.open("popo.csv", FILE_WRITE);

      if (my_sd_File) {

        for(int i = 0; i < mat.rows(); ++i) {
      for(int j = 0; j < mat.cols(); ++j) {
        my_sd_File.print(mat(i, j));
        if (j < mat.cols() - 1) {
          my_sd_File.print(","); // 在元素之间添加逗号
        }
      }
      if(i < mat.rows() - 1) {
        my_sd_File.println(); // 在行之间添加换行符
      }
    }
   my_sd_File.close(); // 关闭文件
      }

      int segment_size = 64;

      Eigen::VectorXf segment_acc_x = mat.col(0);  // 提取第一列
      Eigen::VectorXf seg_acc_x_1 = segment_acc_x.segment(0 * segment_size, segment_size);
      Eigen::VectorXf seg_acc_x_2 = segment_acc_x.segment(1 * segment_size, segment_size);
      Eigen::VectorXf seg_acc_x_3 = segment_acc_x.segment(2 * segment_size, segment_size);
      Eigen::VectorXf seg_acc_x_4 = segment_acc_x.segment(3 * segment_size, segment_size);

      Eigen::VectorXf segment_acc_y = mat.col(1);  // 提取第一列
      Eigen::VectorXf seg_acc_y_1 = segment_acc_y.segment(0 * segment_size, segment_size);
      Eigen::VectorXf seg_acc_y_2 = segment_acc_y.segment(1 * segment_size, segment_size);
      Eigen::VectorXf seg_acc_y_3 = segment_acc_y.segment(2 * segment_size, segment_size);
      Eigen::VectorXf seg_acc_y_4 = segment_acc_y.segment(3 * segment_size, segment_size);

      Eigen::VectorXf segment_acc_z = mat.col(2);  // 提取第一列
      Eigen::VectorXf seg_acc_z_1 = segment_acc_z.segment(0 * segment_size, segment_size);
      Eigen::VectorXf seg_acc_z_2 = segment_acc_z.segment(1 * segment_size, segment_size);
      Eigen::VectorXf seg_acc_z_3 = segment_acc_z.segment(2 * segment_size, segment_size);
      Eigen::VectorXf seg_acc_z_4 = segment_acc_z.segment(3 * segment_size, segment_size);

      Eigen::VectorXf segment_gyr_x = mat.col(3);  // 提取第一列
      Eigen::VectorXf seg_gyr_x_1 = segment_gyr_x.segment(0 * segment_size, segment_size);
      Eigen::VectorXf seg_gyr_x_2 = segment_gyr_x.segment(1 * segment_size, segment_size);
      Eigen::VectorXf seg_gyr_x_3 = segment_gyr_x.segment(2 * segment_size, segment_size);
      Eigen::VectorXf seg_gyr_x_4 = segment_gyr_x.segment(3 * segment_size, segment_size);

      Eigen::VectorXf segment_gyr_y = mat.col(4);  // 提取第一列
      Eigen::VectorXf seg_gyr_y_1 = segment_gyr_y.segment(0 * segment_size, segment_size);
      Eigen::VectorXf seg_gyr_y_2 = segment_gyr_y.segment(1 * segment_size, segment_size);
      Eigen::VectorXf seg_gyr_y_3 = segment_gyr_y.segment(2 * segment_size, segment_size);
      Eigen::VectorXf seg_gyr_y_4 = segment_gyr_y.segment(3 * segment_size, segment_size);

      Eigen::VectorXf segment_gyr_z = mat.col(5);  // 提取第一列
      Eigen::VectorXf seg_gyr_z_1 = segment_gyr_z.segment(0 * segment_size, segment_size);
      Eigen::VectorXf seg_gyr_z_2 = segment_gyr_z.segment(1 * segment_size, segment_size);
      Eigen::VectorXf seg_gyr_z_3 = segment_gyr_z.segment(2 * segment_size, segment_size);
      Eigen::VectorXf seg_gyr_z_4 = segment_gyr_z.segment(3 * segment_size, segment_size);

      Serial.println("seg_acc_x_1:");
      for (int i = 0; i < seg_acc_x_1.size(); i++) {
        Serial.println(seg_acc_x_1(i));  // 将小数点后的位数设置为4位
      }
      for (int i = 0; i < seg_acc_x_4.size(); i++) {
        Serial.println(seg_acc_x_4(i));  // 将小数点后的位数设置为4位
      }
      Serial.println("seg_acc_x over");
      // for (int i = 0; i < segment.size(); i++) {
      //   Serial.println(segment(i));  // 将小数点后的位数设置为4位
      // }
      // Serial.println("col0 print over");
      Eigen::VectorXf result_acc_x_1 = matrix48 * seg_acc_x_1;
      Eigen::VectorXf result_acc_x_2 = matrix48 * seg_acc_x_2;
      Eigen::VectorXf result_acc_x_3 = matrix48 * seg_acc_x_3;
      Eigen::VectorXf result_acc_x_4 = matrix48 * seg_acc_x_4;
      Serial.println("calculate1");

      Eigen::VectorXf result_acc_y_1 = matrix48 * seg_acc_y_1;
      Eigen::VectorXf result_acc_y_2 = matrix48 * seg_acc_y_2;
      Eigen::VectorXf result_acc_y_3 = matrix48 * seg_acc_y_3;
      Eigen::VectorXf result_acc_y_4 = matrix48 * seg_acc_y_4;
      Serial.println("calculate2");

      Eigen::VectorXf result_acc_z_1 = matrix48 * seg_acc_z_1;
      Eigen::VectorXf result_acc_z_2 = matrix48 * seg_acc_z_2;
      Eigen::VectorXf result_acc_z_3 = matrix48 * seg_acc_z_3;
      Eigen::VectorXf result_acc_z_4 = matrix48 * seg_acc_z_4;
      Serial.println("calculate3");

      Eigen::VectorXf result_gyr_x_1 = matrix48 * seg_gyr_x_1;
      Eigen::VectorXf result_gyr_x_2 = matrix48 * seg_gyr_x_2;
      Eigen::VectorXf result_gyr_x_3 = matrix48 * seg_gyr_x_3;
      Eigen::VectorXf result_gyr_x_4 = matrix48 * seg_gyr_x_4;
      Serial.println("calculate4");

      Eigen::VectorXf result_gyr_y_1 = matrix48 * seg_gyr_y_1;
      Eigen::VectorXf result_gyr_y_2 = matrix48 * seg_gyr_y_2;
      Eigen::VectorXf result_gyr_y_3 = matrix48 * seg_gyr_y_3;
      Eigen::VectorXf result_gyr_y_4 = matrix48 * seg_gyr_y_4;
      Serial.println("calculate5");

      Eigen::VectorXf result_gyr_z_1 = matrix48 * seg_gyr_z_1;
      Eigen::VectorXf result_gyr_z_2 = matrix48 * seg_gyr_z_2;
      Eigen::VectorXf result_gyr_z_3 = matrix48 * seg_gyr_z_3;
      Eigen::VectorXf result_gyr_z_4 = matrix48 * seg_gyr_z_4;
      Serial.println("calculate6");

      Eigen::VectorXf result_acc_x_combine(192);  // 定义一个长度为192的向量
      Eigen::VectorXf result_acc_y_combine(192);  // 定义一个长度为192的向量
      Eigen::VectorXf result_acc_z_combine(192);  // 定义一个长度为192的向量
      Eigen::VectorXf result_gyr_x_combine(192);  // 定义一个长度为192的向量
      Eigen::VectorXf result_gyr_y_combine(192);  // 定义一个长度为192的向量
      Eigen::VectorXf result_gyr_z_combine(192);  // 定义一个长度为192的向量
      Serial.println("calculate7");
      result_acc_x_combine.segment(0, 48) = result_acc_x_1;
      result_acc_x_combine.segment(48, 48) = result_acc_x_2;
      result_acc_x_combine.segment(96, 48) = result_acc_x_3;
      result_acc_x_combine.segment(144, 48) = result_acc_x_4;

      result_acc_y_combine.segment(0, 48) = result_acc_y_1;
      result_acc_y_combine.segment(48, 48) = result_acc_y_2;
      result_acc_y_combine.segment(96, 48) = result_acc_y_3;
      result_acc_y_combine.segment(144, 48) = result_acc_y_4;

      result_acc_z_combine.segment(0, 48) = result_acc_z_1;
      result_acc_z_combine.segment(48, 48) = result_acc_z_2;
      result_acc_z_combine.segment(96, 48) = result_acc_z_3;
      result_acc_z_combine.segment(144, 48) = result_acc_z_4;

      result_gyr_x_combine.segment(0, 48) = result_gyr_x_1;
      result_gyr_x_combine.segment(48, 48) = result_gyr_x_2;
      result_gyr_x_combine.segment(96, 48) = result_gyr_x_3;
      result_gyr_x_combine.segment(144, 48) = result_gyr_x_4;

      result_gyr_y_combine.segment(0, 48) = result_gyr_y_1;
      result_gyr_y_combine.segment(48, 48) = result_gyr_y_2;
      result_gyr_y_combine.segment(96, 48) = result_gyr_y_3;
      result_gyr_y_combine.segment(144, 48) = result_gyr_y_4;

      result_gyr_z_combine.segment(0, 48) = result_gyr_z_1;
      result_gyr_z_combine.segment(48, 48) = result_gyr_z_2;
      result_gyr_z_combine.segment(96, 48) = result_gyr_z_3;
      result_gyr_z_combine.segment(144, 48) = result_gyr_z_4;


      Serial.println("calculate8");

      for (int i = 0; i < result_gyr_z_combine.size(); ++i) {
        Serial.print(result_gyr_z_combine[i]);
        Serial.println(" ");
      }





      //       Serial.println("final compressed:");
      //       for (int i = 0; i < result_final.rows(); ++i) {
      //         for (int j = 0; j < result_final.cols(); ++j) {
      //           Serial.print(result_final(i, j));
      //           Serial.print(" ");  // 用空格分隔每一列
      //         }
      //         Serial.println();  // 换行到下一行
      //       }
      // 在这里，你可以对result进行你想要的操作，例如打印它：
      // for (int i = 0; i < result.size(); i++) {
      //   Serial.println(result(i),4);
      // }

      long endhaha_time = millis();

      Serial.println("calculation time is :");
      Serial.println(endhaha_time);
      Serial.println(starthaha_time);





      SD.begin(27);

      Serial.println("write successfully...");
      Serial.println(sd_filename);
      my_sd_File = SD.open("sdasd.csv", FILE_WRITE);

      if (my_sd_File) {

        for (int i = 0; i < result_gyr_z_combine.size(); ++i) {
          my_sd_File.print(result_gyr_z_combine[i]);
          if (i < result_gyr_z_combine.size() - 1) {
            my_sd_File.print("\n");  // 在元素之间添加逗号
          }
        }
        my_sd_File.close();  // 关闭文件
      }
    }

    prevTime_T4 = currentTime;

    if (compressive_sensing_control == 0) {
      //haha, i dont do any thing here, good luck.
    }

    if (compressive_sensing_control == 1) {
      automatical_time_interval_counter++;
      gyr_detecter = gyr_detecter + abs(gyr_z);
      if (automatical_time_interval_counter == 5) {
        gyr_detecter = gyr_detecter / 5;  // 玄学，如果这里没有除法，写入文件不会出错
        gyr_detecter = (int)gyr_detecter;

        automatical_time_interval_curve(gyr_detecter);
        automatical_time_interval_counter = 0;
        gyr_detecter = 0;
      }
    }
    if (compressive_sensing_control == 2) {
      automatical_time_interval_counter++;
      gyr_detecter = gyr_detecter + abs(gyr_z);
      if (automatical_time_interval_counter == 5) {
        gyr_detecter = gyr_detecter / 5;  // 玄学，如果这里没有除法，写入文件不会出错
        gyr_detecter = (int)gyr_detecter;

        automatical_time_interval_fast(gyr_detecter);
        automatical_time_interval_counter = 0;
        gyr_detecter = 0;
      }
    }
  }
}

void Sht40_Setup() {
  pinMode(24, OUTPUT);
  digitalWrite(24, HIGH);
  pinMode(9, INPUT_PULLUP);
  pinMode(10, INPUT_PULLUP);

  Wire.begin();



  delay(10);
  Serial.println("sht40 initialization setup finished...");
}
void Sht40_Action_Callback() {
  float* sht_data = sht.get_data_float();  // 获取数据，返回一个指向包含温度和湿度值的浮点数数组的指针, cpp必须使用static，不然读出来全是0
  Serial.print("Temperature: ");
  Serial.print(sht_data[0]);
  Serial.print(", Humidity: ");
  Serial.print(sht_data[1]);
  Serial.println("%");
}
void NRFSetup_Callback() {
  GPIO_Initiation();
  pinMode(13, OUTPUT);  // LED输出

  pinMode(14, OUTPUT);
  pinMode(15, OUTPUT);
  pinMode(27, OUTPUT);

  pinMode(22, OUTPUT);  //打开IC开关
  digitalWrite(22, HIGH);

  pinMode(23, OUTPUT);  //打开IC开关
  digitalWrite(23, HIGH);

  pinMode(24, OUTPUT);  //打开IC开关
  digitalWrite(24, HIGH);





  BMI_Setup();


  Sht40_Setup();
}

void BMI_Setup() {
  // if (BMI_init_status != 1) { // 我发现BMI初始化放在这里最好，因为修改模式和初始化完全无关，我刚开始是放在BMI_ADXL_Action里面的，这导致第一次使用的时候很慢，要等待初始化完成，但是放在这里的话
  //                         // 在我配置手机蓝牙的时候，它自己就开始初始化了，我点START之后立马开始运行了，这样好得多
  // 绝了 ，这里配置不信，导致BMI只会输出acc数据，gyr一直为0，但是放在setup_callback就没事。  我最后妥协了，在nrfsetup callback里面呼叫了这个函数，变成顺序执行
  //   while (1) {
  //     BMISetup();
  //     if (BMI_init_status == 1) {
  //       break;
  //     }
  //   }
  // }

  // adxl.Initialization(adxl_slaveSelectPin);

  if (BMI_init_status != 1) {  // 我发现BMI初始化放在这里最好，因为修改模式和初始化完全无关，我刚开始是放在BMI_ADXL_Action里面的，这导致第一次使用的时候很慢，要等待初始化完成，但是放在这里的话
                               // 在我配置手机蓝牙的时候，它自己就开始初始化了，我点START之后立马开始运行了，这样好得多
    while (1) {
      BMI_8kb_upload();
      if (BMI_init_status == 1) {
        break;
      }
    }
  }
  digitalWrite(13, HIGH);
  Serial.println("BMI initialization set up finished...");
}


void GPIO_Initiation() {
  //SPI 上拉电阻
  // pinMode(6, INPUT_PULLUP);
  // pinMode(7, INPUT_PULLUP);
  // pinMode(8, INPUT_PULLUP);
  // pinMode(14, INPUT_PULLUP);  //CS BMI
  // pinMode(15, INPUT_PULLUP);  //CS ADXL
  // pinMode(27, INPUT_PULLUP);
  //I2C 上拉电阻
  //pinMode(9, INPUT_PULLUP);
  //pinMode(10, INPUT_PULLUP);
  pinMode(9, OUTPUT);
  digitalWrite(9, LOW);
  pinMode(10, OUTPUT);  //我发现不用吧i2c的时候必须要给低电平，不然i2c会导致sht40的shtvcc引脚有3V的电压
  digitalWrite(10, LOW);


  //DISABLE IC SWITCH
  pinMode(22, OUTPUT);
  digitalWrite(22, LOW);
  pinMode(23, OUTPUT);
  digitalWrite(23, LOW);
  pinMode(24, OUTPUT);
  digitalWrite(24, LOW);
  pinMode(25, OUTPUT);
  digitalWrite(25, LOW);

  //DISABLE BMI INT
  pinMode(4, OUTPUT);
  digitalWrite(4, LOW);
  pinMode(5, OUTPUT);
  digitalWrite(5, LOW);


  pinMode(26, OUTPUT);
  digitalWrite(26, LOW);
  pinMode(28, OUTPUT);
  digitalWrite(28, LOW);
  pinMode(31, OUTPUT);  //IR OUT
  digitalWrite(31, LOW);
}

void BLESetup_Callback() {



  // create service

  blePeripheral.setLocalName("My NRF Device");
  blePeripheral.setAdvertisedServiceUuid(sensorConfigService.uuid());

  // add service and characteristic
  blePeripheral.addAttribute(sensorConfigService);
  blePeripheral.addAttribute(bmi_pwr_Characteristic);
  blePeripheral.addAttribute(acc_range_Characteristic);
  blePeripheral.addAttribute(gyr_range_Characteristic);
  blePeripheral.addAttribute(bmi_hz_Characteristic);
  blePeripheral.addAttribute(compressive_sensing_Characteristic);
  blePeripheral.addAttribute(data_compression_Characteristic);
  blePeripheral.addAttribute(te_hu_Characteristic);
  blePeripheral.addAttribute(infrared_Characteristic);



  blePeripheral.addAttribute(Start_Service);
  blePeripheral.addAttribute(Start_Characteristic);
  // begin initialization


  blePeripheral.begin();


  Serial.println(F("BLE waits to be connected..."));


  delay(5);
}




void BMI_8kb_upload() {
  SPI.begin();

  SPI.setDataMode(SPI_MODE3);
  //SPI.setBitOrder(MSBFIRST);
  delay(50);
  // SPI 4MHz
  SPI.setClockDivider(SPI_CLOCK_DIV2);

  //Dummy data
  SPI.transfer(0xFF);
  //Software Reset
  bmi2xx.writeRegister(CMD, 0xB6);
  delay(100);

  // Initialization Phase A.
  // Dummy
  bmi2xx.readRegister(0x00, 2);
  // BMI_chip_ID = bmi2xx.readRegister(CHIPID, 2);
  // Serial.print("BMI_chip_ID  = ");
  // Serial.println(BMI_chip_ID);

  BMI_power_mode = bmi2xx.readRegister(PWR_CONF, 2);
  // Serial.print("BMI_power_mode  = ");
  // Serial.println(BMI_power_mode);

  // Initialization Phase B.
  // disalbe POWER save mode
  // it was supposed to be 0x00
  bmi2xx.writeRegister(PWR_CONF, 0x0);
  //wait > 450us
  delay(1);

  //prepare config load INIT_CTRL = 0x00
  bmi2xx.writeRegister(INIT_CTRL, 0x00);

  //load config file and save as array
  config_size = sizeof(bmi2xx_config_file);

  if (config_size != CONFIG_SIZE) {
    Serial.println("Please put proper config file");
    while (1)
      ;
  }

  file_count = 0;

  byte* filepos = (byte*)bmi2xx_config_file;

  while (config_size > 0) {
    bmi2xx.Upload_file(config_size, file_count, filepos);

    filepos += 32;
    file_count++;
    config_size -= 32;
    delay(1);
  }

  //complete config load INIT_CTRL = 0x01
  bmi2xx.writeRegister(INIT_CTRL, 0x01);

  //Wait >= 140
  delay(150);

  // Initialization Phase C - Checking the correct initialization status
  BMI_init_status = bmi2xx.readRegister(INT_STATUS, 2);
  // Should be 1
  Serial.print("BMI_init_status  = ");
  Serial.println(BMI_init_status);
  //最原始代码有lidumode的时候，更改模式是放在这个最后位置的，我也放这里。 我发现放这里不行，以为运行中就无法改变了，以为这个BMISETUP只运行一次。
}

void config_all_sensors() {

  bmi_pwr_control = received_config_from_ble[0];

  acc_range_control = received_config_from_ble[1];
  gyr_range_control = received_config_from_ble[2];


  bmi_acc_config = received_config_from_ble[3];
  bmi_gyr_config = received_config_from_ble[3];

  compressive_sensing_control = received_config_from_ble[4];
  data_compression_control = received_config_from_ble[5];



  te_hu_control = received_config_from_ble[6];

  infrared_control = received_config_from_ble[7];


  Serial.println(gyr_range_control);
  bmi2xx.customized_mode_bmi(bmi_pwr_control, bmi_acc_config, bmi_gyr_config, acc_range_control, gyr_range_control);
  motion_sensor_inteval_set(bmi_acc_config);  //  不同的采样率要对应不同的数据速率
  sht.customized_mode_sht40(te_hu_control);
}
void motion_sensor_inteval_set(uint8_t bmi_hz_configure) {
  if (bmi_hz_configure == 0x05) {
    motion_sensor_time_interval = 79;
  }
  if (bmi_hz_configure == 0x06) {
    motion_sensor_time_interval = 39;
  }
  if (bmi_hz_configure == 0x07) {
    motion_sensor_time_interval = 19;
  }
  if (bmi_hz_configure == 0x08) {
    motion_sensor_time_interval = 9;
  }
  if (bmi_hz_configure == 0x09) {
    motion_sensor_time_interval = 4;
  }
  if (bmi_hz_configure == 0x0a) {
    motion_sensor_time_interval = 2;  // should be 2.5, but egal, not important
  }
  interval_T4_BMI270 = motion_sensor_time_interval;
  Serial.println("interval");
  Serial.println(motion_sensor_time_interval);
}

// void automatical_time_interval(int16_t x, int16_t y, int16_t z) {

void automatical_time_interval_fast(int x) {
  int testnumer = x;
  //int testnumer = abs(x) + abs(y) + abs(z);
  Serial.print("testnumer:");
  Serial.print(testnumer);
  Serial.println("");
  if (testnumer <= 100) {
    motion_sensor_time_interval = 99;
  }
  if (testnumer >= 101 && testnumer <= 500) {
    motion_sensor_time_interval = 79;
  }
  if (testnumer >= 501 && testnumer <= 1000) {
    motion_sensor_time_interval = 59;
  }
  if (testnumer >= 1001 && testnumer <= 2000) {
    motion_sensor_time_interval = 39;
  }
  if (testnumer >= 2001 && testnumer <= 3000) {
    motion_sensor_time_interval = 19;
  }
  if (testnumer >= 3001) {
    motion_sensor_time_interval = 9;
  }
  interval_T4_BMI270 = motion_sensor_time_interval;
  //delay(10);
}

void automatical_time_interval_curve(int x) {
  int testnumer = x;
  //int testnumer = abs(x) + abs(y) + abs(z);
  Serial.print("testnumer:");
  Serial.print(testnumer);
  Serial.println("");
  if (testnumer > 2000) {
    if (motion_sensor_time_interval > 10) {
      motion_sensor_time_interval = motion_sensor_time_interval - 10;
    }
  } else if (testnumer < 2000) {
    if (motion_sensor_time_interval < 100) {
      motion_sensor_time_interval = motion_sensor_time_interval + 10;
    }
  }
  interval_T4_BMI270 = motion_sensor_time_interval;
  //delay(10);
}
